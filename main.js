!function(){"use strict";const e=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}editProfile(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}addCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}loadData(){return Promise.all([this.getUserInfo(),this.getInitialCards()]).then((e=>{let[t,n]=e;return{userInfo:t,initialCards:n}}))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"c7f5c92f-7ce5-490b-8dc6-c25c01900635","Content-Type":"application/json"}});var t=e;class n{constructor(e,t){this._config=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}_showInputError(e,t){const n=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._config.inputErrorClass),n.textContent=t,n.classList.add(this._config.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}}class r{constructor(e,t,n,r,s,i,o){this._name=e.name,this._link=e.link,this._id=e._id,this._likes=e.likes,this._ownerId=e.owner._id,this._cardSelector=t,this._openImageModal=n,this._handleLike=r,this._handleDelete=s,this._cardList=o,this._userId=i}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._element.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLike(this)})),this._element.querySelector(".card__image").addEventListener("click",(()=>{this._openImageModal({name:this._name,link:this._link})})),this._element.querySelector(".card__delete-button").addEventListener("click",(e=>{e.preventDefault(),this._handleDelete(this._id)}))}deleteCard(){this._element.remove(),this._element=null}updateLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this._element.querySelector(".card__like-count").textContent=this._likes.length,this._element.querySelector(".card__like-button").classList.toggle("card__like-button_active",this.isLiked())}isLiked(){return this._likes.some((e=>e._id===this._userId))}getId(){return this._id}generateCard(){return this._element=this._getTemplate(),this._element.setAttribute("data-id",this._id),this._element.querySelector(".card__title").textContent=this._name,this._element.querySelector(".card__image").src=this._link,this._element.querySelector(".card__image").alt=this._name,this._renderLikes(),this._setEventListeners(),this._userId!==this._ownerId&&this._element.querySelector(".card__delete-button").remove(),this._element}}var s=class{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",(e=>{e.target===this._popupElement&&this.close()}))}};class i extends s{constructor(e,t,n){super(e),this._handleSubmit=t,this._formElement=this._popupElement.querySelector("form"),this._submitButton=this._formElement.querySelector(".modal__button[type='submit']"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=n}close(){super.close(),this._formElement.reset()}renderLoading(e){this._submitButton.textContent=e?this._loadingButtonText:this._buttonText}_getInputValues(){const e=this._formElement.querySelectorAll("input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())}))}}document.querySelector(".profile__avatar"),document.querySelector(".profile__title"),document.querySelector(".profile__description");const o=document.querySelector("#profile-edit-button"),a=document.querySelector("#profile-title-input"),l=document.querySelector("#profile-description-input"),d=document.querySelector(".profile__add-button"),c=(document.querySelector(".card__list"),document.querySelector("#add-modal-title-input"),document.querySelector("#cardUrlInput"),document.querySelector(".profile__hover-edit")),h=(document.querySelector("#edit-avatar-modal"),document.querySelector("#edit-avatar-modal-close-button"));let _,u,m;function p(e){console.trace(`handleCardDelete called with ID: ${e}`),console.log("cardId",e),C.open(e),C.setConfirmHandler((()=>{C.renderLoading(!0),t.deleteCard(e).then((()=>{console.log(`Deleted card with ID: ${e}`),m.removeItem(e),C.close()})).catch((e=>{console.error(`Failed to delete card: ${e}`)})).finally((()=>{C.renderLoading(!1)}))}))}function v(e,t){return new r(e,"#card-template",f,E,p,t,m).generateCard()}function f(e){q.open(e)}function E(e){e.isLiked()?t.removeLike(e._id).then((t=>(e.updateLikes(t.likes),t))).catch((e=>{console.error(`Failed to remove like: ${e}`)})):t.addLike(e._id).then((t=>(e.updateLikes(t.likes),t))).catch((e=>{console.error(`Failed to add like: ${e}`)}))}document.querySelector("#edit-avatar-form"),document.querySelector("#avatar-url-input"),document.getElementById("edit-profile-create-button"),t.loadData().then((e=>{let{userInfo:t,initialCards:n}=e;u=new class{constructor(e){let{nameSelector:t,jobSelector:n,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(n),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e,t,n){this._nameElement.textContent=e,this._jobElement.textContent=t,this._avatarElement.src=n}getAvatar(){return this._avatarElement.src}setAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__avatar"}),u.setUserInfo(t.name,t.about),u.setAvatar(t.avatar),_=t._id,m=new class{constructor(e,t){let{items:n,renderer:r}=e;this._items=n,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}removeItem(e){console.log(`Trying to remove item with id: ${e}`);const t=this._container.querySelector(`[data-id="${e}"]`);console.log("Found item element: ",t),t&&(t.remove(),console.log(`Item with id: ${e} removed.`))}}({items:n,renderer:e=>{const t=v(e,_);m.addItem(t)}},".card__list"),m.renderItems()})).catch((e=>{console.error(`Failed to get user info and initial cards: ${e}`)})),c.addEventListener("click",(()=>b.open())),o.addEventListener("click",(()=>{const e=u.getUserInfo();a.value=e.name,l.value=e.job,L.resetValidation(),y.open()})),h.addEventListener("click",(()=>{b.close()})),d.addEventListener("click",(()=>{S.resetValidation(),k.open()}));const g={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},L=new n(g,document.querySelector("#profile-edit-modal form"));L.enableValidation();const S=new n(g,document.querySelector("#add-modal form"));S.enableValidation();const b=new i("#edit-avatar-modal",(function(e){b.renderLoading(!0),t.updateAvatar(e.avatar).then((()=>{u.setAvatar(e.avatar),b.close()})).catch((e=>{console.error(e)})).finally((()=>{b.renderLoading(!1)}))}),"Saving...");b.setEventListeners();const y=new i("#profile-edit-modal",(function(e){y.renderLoading(!0);const n=a,r=l;t.editProfile(n.value,r.value).then((e=>{u.setUserInfo(e.name,e.about,u.getAvatar()),y.close()})).catch((e=>{console.error(e)})).finally((()=>{y.renderLoading(!1)}))}),"Saving...");y.setEventListeners();const k=new i("#add-modal",(function(e){k.renderLoading(!0),t.addCard(e.name,e.link).then((e=>{if(!e||!e._id)throw new Error("Invalid card data received from the server");{const t=v(e,_);m.addItem(t),k.close()}})).catch((e=>{console.error(`Failed to add card: ${e}`)})).finally((()=>{k.renderLoading(!1)}))}),"Saving...");k.setEventListeners();const C=new class extends s{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";super(e),this._confirmButton=this._popupElement.querySelector(".modal__close"),this._confirmButtonText=this._confirmButton.textContent,this._confirmDeleteButton=this._popupElement.querySelector(".modal__delete-button"),this._submitButton=this._popupElement.querySelector(".modal__delete-button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=t}setConfirmHandler(e){this._confirmHandler=e,this._confirmButton.addEventListener("click",(e=>{e.preventDefault(),this._confirmHandler()})),this._confirmDeleteButton.addEventListener("click",(e=>{e.preventDefault(),this._confirmHandler()}))}close(){super.close(),this._confirmButton.removeEventListener("click",this._confirmHandler),this._confirmDeleteButton.removeEventListener("click",this._confirmHandler)}renderLoading(e){console.log("renderLoading called with: ",e),this._submitButton.textContent=e?this._loadingButtonText:this._buttonText,console.log("Button text after renderLoading: ",this._submitButton.textContent)}}("#delete-modal");C.setEventListeners();const q=new class extends s{constructor(e){super(e),this._imageElement=this._popupElement.querySelector(".modal__preview-image"),this._imageCaption=this._popupElement.querySelector(".modal__preview-title")}open(e){this._imageElement.src=e.link,this._imageElement.alt=e.name,this._imageCaption.textContent=e.name,super.open()}}("#preview__image-modal");q.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,